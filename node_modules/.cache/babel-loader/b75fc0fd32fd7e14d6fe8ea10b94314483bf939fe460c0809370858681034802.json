{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { useDispatch } from \"react-redux\";\nconst dispatchFn = useDispatch();\nconst uiSlice = createSlice({\n  name: 'uiSlice',\n  initialState: {\n    cartIsVisible: false,\n    notification: null\n  },\n  reducers: {\n    // toggle is a ui action!\n    toggle(state) {\n      state.cartIsVisible = !state.cartIsVisible;\n    },\n    showNotification(state, action) {\n      state.notification = {\n        statue: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\nconst fbdbURL = \"https://react-http-realtime-db-json-default-rtdb.firebaseio.com/cart.json\";\nexport const sendCartData = cart => {\n  return async () => {\n    dispatchFn(UiActions.showNotification({\n      status: \"Pending\",\n      title: \"Sending\",\n      message: \"Sending Cart Data\"\n    }));\n    const sendCartRequest = async () => {\n      const response = await fetch(fbdbURL, {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed');\n      }\n      dispatchFn(UiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Cart Data Sent Successfully\"\n      }));\n    };\n    try {\n      await sendCartRequest();\n    } catch (e) {\n      dispatchFn(UiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: e.message\n      }));\n    }\n  };\n};\nexport const UiActions = uiSlice.actions;\nexport default uiSlice;","map":{"version":3,"names":["createSlice","useDispatch","dispatchFn","uiSlice","name","initialState","cartIsVisible","notification","reducers","toggle","state","showNotification","action","statue","payload","status","title","message","fbdbURL","sendCartData","cart","UiActions","sendCartRequest","response","fetch","method","body","JSON","stringify","ok","Error","e","actions"],"sources":["C:/Web/2023/redux-cart/src/store/ui-slice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst dispatchFn = useDispatch();\r\n\r\n\r\nconst uiSlice = createSlice({\r\n    name: 'uiSlice',\r\n    initialState: {cartIsVisible: false,notification:null},\r\n    reducers:{\r\n        // toggle is a ui action!\r\n        toggle(state){\r\n            state.cartIsVisible = !state.cartIsVisible;\r\n        },\r\n        showNotification(state,action){\r\n            state.notification = {\r\n                statue:action.payload.status,\r\n                title:action.payload.title,\r\n                message:action.payload.message,\r\n            };\r\n        }\r\n    }\r\n})\r\n\r\nconst fbdbURL = \"https://react-http-realtime-db-json-default-rtdb.firebaseio.com/cart.json\";\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async () => {\r\n        dispatchFn(UiActions.showNotification({\r\n            status: \"Pending\",\r\n            title: \"Sending\",\r\n            message: \"Sending Cart Data\"\r\n        }))\r\n\r\n        const sendCartRequest = async () => {\r\n            const response = await fetch(fbdbURL, {\r\n                method: 'PUT',\r\n                body: JSON.stringify(cart)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed');\r\n            }\r\n\r\n            dispatchFn(UiActions.showNotification({\r\n                status: \"success\",\r\n                title: \"Success!\",\r\n                message: \"Cart Data Sent Successfully\"\r\n            }))\r\n        }\r\n\r\n        try {\r\n            await sendCartRequest();\r\n        } catch (e) {\r\n            dispatchFn(UiActions.showNotification({\r\n                status: \"error\",\r\n                title: \"Error!\",\r\n                message: e.message\r\n            }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const UiActions = uiSlice.actions;\r\nexport default uiSlice;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,SAAQC,WAAW,QAAO,aAAa;AAEvC,MAAMC,UAAU,GAAGD,WAAW,EAAE;AAGhC,MAAME,OAAO,GAAGH,WAAW,CAAC;EACxBI,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IAACC,aAAa,EAAE,KAAK;IAACC,YAAY,EAAC;EAAI,CAAC;EACtDC,QAAQ,EAAC;IACL;IACAC,MAAM,CAACC,KAAK,EAAC;MACTA,KAAK,CAACJ,aAAa,GAAG,CAACI,KAAK,CAACJ,aAAa;IAC9C,CAAC;IACDK,gBAAgB,CAACD,KAAK,EAACE,MAAM,EAAC;MAC1BF,KAAK,CAACH,YAAY,GAAG;QACjBM,MAAM,EAACD,MAAM,CAACE,OAAO,CAACC,MAAM;QAC5BC,KAAK,EAACJ,MAAM,CAACE,OAAO,CAACE,KAAK;QAC1BC,OAAO,EAACL,MAAM,CAACE,OAAO,CAACG;MAC3B,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMC,OAAO,GAAG,2EAA2E;AAE3F,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,YAAY;IACflB,UAAU,CAACmB,SAAS,CAACV,gBAAgB,CAAC;MAClCI,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,SAAS;MAChBC,OAAO,EAAE;IACb,CAAC,CAAC,CAAC;IAEH,MAAMK,eAAe,GAAG,YAAY;MAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAO,EAAE;QAClCO,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI;MAC7B,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACM,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MAEA5B,UAAU,CAACmB,SAAS,CAACV,gBAAgB,CAAC;QAClCI,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,UAAU;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAI;MACA,MAAMK,eAAe,EAAE;IAC3B,CAAC,CAAC,OAAOS,CAAC,EAAE;MACR7B,UAAU,CAACmB,SAAS,CAACV,gBAAgB,CAAC;QAClCI,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAEc,CAAC,CAACd;MACf,CAAC,CAAC,CAAC;IACP;EAEJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGlB,OAAO,CAAC6B,OAAO;AACxC,eAAe7B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}